{"remainingRequest":"/Users/zhaosh/github/wdh-pmp/ruoyi-ui/node_modules/babel-loader/lib/index.js!/Users/zhaosh/github/wdh-pmp/ruoyi-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/zhaosh/github/wdh-pmp/ruoyi-ui/src/utils/dict/Dict.js","dependencies":[{"path":"/Users/zhaosh/github/wdh-pmp/ruoyi-ui/src/utils/dict/Dict.js","mtime":1645289502000},{"path":"/Users/zhaosh/github/wdh-pmp/ruoyi-ui/babel.config.js","mtime":1645289502000},{"path":"/Users/zhaosh/github/wdh-pmp/ruoyi-ui/node_modules/cache-loader/dist/cjs.js","mtime":1646568386999},{"path":"/Users/zhaosh/github/wdh-pmp/ruoyi-ui/node_modules/babel-loader/lib/index.js","mtime":1646568387812},{"path":"/Users/zhaosh/github/wdh-pmp/ruoyi-ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1646568387151}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKCIvVXNlcnMvemhhb3NoL2dpdGh1Yi93ZGgtcG1wL3J1b3lpLXVpL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIpLmRlZmF1bHQ7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyIpOwoKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlLmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIik7CgpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiKTsKCnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiKTsKCnZhciBfdG9Db25zdW1hYmxlQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIvVXNlcnMvemhhb3NoL2dpdGh1Yi93ZGgtcG1wL3J1b3lpLXVpL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzIikpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi9Vc2Vycy96aGFvc2gvZ2l0aHViL3dkaC1wbXAvcnVveWktdWkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiKSk7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiL1VzZXJzL3poYW9zaC9naXRodWIvd2RoLXBtcC9ydW95aS11aS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIpKTsKCnZhciBfdnVlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJ2dWUiKSk7Cgp2YXIgX3J1b3lpID0gcmVxdWlyZSgiQC91dGlscy9ydW95aSIpOwoKdmFyIF9EaWN0TWV0YSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi9EaWN0TWV0YSIpKTsKCnZhciBfRGljdERhdGEgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi4vRGljdERhdGEiKSk7Cgp2YXIgREVGQVVMVF9ESUNUX09QVElPTlMgPSB7CiAgdHlwZXM6IFtdCn07Ci8qKg0KICogQGNsYXNzZGVzYyDlrZflhbgNCiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBsYWJlbCDmoIfnrb7lr7nosaHvvIzlhoXpg6jlsZ7mgKflkI3kuLrlrZflhbjnsbvlnovlkI3np7ANCiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkaWN0IOWtl+auteaVsOe7hO+8jOWGhemDqOWxnuaAp+WQjeS4uuWtl+WFuOexu+Wei+WQjeensA0KICogQHByb3BlcnR5IHtBcnJheS48RGljdE1ldGE+fSBfZGljdE1ldGFzIOWtl+WFuOWFg+aVsOaNruaVsOe7hA0KICovCgp2YXIgRGljdCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gRGljdCgpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIERpY3QpOwogICAgdGhpcy5vd25lciA9IG51bGw7CiAgICB0aGlzLmxhYmVsID0ge307CiAgICB0aGlzLnR5cGUgPSB7fTsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKERpY3QsIFt7CiAgICBrZXk6ICJpbml0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KG9wdGlvbnMpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmIChvcHRpb25zIGluc3RhbmNlb2YgQXJyYXkpIHsKICAgICAgICBvcHRpb25zID0gewogICAgICAgICAgdHlwZXM6IG9wdGlvbnMKICAgICAgICB9OwogICAgICB9CgogICAgICB2YXIgb3B0cyA9ICgwLCBfcnVveWkubWVyZ2VSZWN1cnNpdmUpKERFRkFVTFRfRElDVF9PUFRJT05TLCBvcHRpb25zKTsKCiAgICAgIGlmIChvcHRzLnR5cGVzID09PSB1bmRlZmluZWQpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25lZWQgZGljdCB0eXBlcycpOwogICAgICB9CgogICAgICB2YXIgcHMgPSBbXTsKICAgICAgdGhpcy5fZGljdE1ldGFzID0gb3B0cy50eXBlcy5tYXAoZnVuY3Rpb24gKHQpIHsKICAgICAgICByZXR1cm4gX0RpY3RNZXRhLmRlZmF1bHQucGFyc2UodCk7CiAgICAgIH0pOwoKICAgICAgdGhpcy5fZGljdE1ldGFzLmZvckVhY2goZnVuY3Rpb24gKGRpY3RNZXRhKSB7CiAgICAgICAgdmFyIHR5cGUgPSBkaWN0TWV0YS50eXBlOwoKICAgICAgICBfdnVlLmRlZmF1bHQuc2V0KF90aGlzLmxhYmVsLCB0eXBlLCB7fSk7CgogICAgICAgIF92dWUuZGVmYXVsdC5zZXQoX3RoaXMudHlwZSwgdHlwZSwgW10pOwoKICAgICAgICBpZiAoZGljdE1ldGEubGF6eSkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgcHMucHVzaChsb2FkRGljdChfdGhpcywgZGljdE1ldGEpKTsKICAgICAgfSk7CgogICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHMpOwogICAgfQogICAgLyoqDQogICAgICog6YeN5paw5Yqg6L295a2X5YW4DQogICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUg5a2X5YW457G75Z6LDQogICAgICovCgogIH0sIHsKICAgIGtleTogInJlbG9hZERpY3QiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbG9hZERpY3QodHlwZSkgewogICAgICB2YXIgZGljdE1ldGEgPSB0aGlzLl9kaWN0TWV0YXMuZmluZChmdW5jdGlvbiAoZSkgewogICAgICAgIHJldHVybiBlLnR5cGUgPT09IHR5cGU7CiAgICAgIH0pOwoKICAgICAgaWYgKGRpY3RNZXRhID09PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoInRoZSBkaWN0IG1ldGEgb2YgIi5jb25jYXQodHlwZSwgIiB3YXMgbm90IGZvdW5kIikpOwogICAgICB9CgogICAgICByZXR1cm4gbG9hZERpY3QodGhpcywgZGljdE1ldGEpOwogICAgfQogIH1dKTsKICByZXR1cm4gRGljdDsKfSgpOwovKioNCiAqIOWKoOi9veWtl+WFuA0KICogQHBhcmFtIHtEaWN0fSBkaWN0IOWtl+WFuA0KICogQHBhcmFtIHtEaWN0TWV0YX0gZGljdE1ldGEg5a2X5YW45YWD5pWw5o2uDQogKiBAcmV0dXJucyB7UHJvbWlzZX0NCiAqLwoKCmV4cG9ydHMuZGVmYXVsdCA9IERpY3Q7CgpmdW5jdGlvbiBsb2FkRGljdChkaWN0LCBkaWN0TWV0YSkgewogIHJldHVybiBkaWN0TWV0YS5yZXF1ZXN0KGRpY3RNZXRhKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgdmFyIF9kaWN0JHR5cGUkdHlwZTsKCiAgICB2YXIgdHlwZSA9IGRpY3RNZXRhLnR5cGU7CiAgICB2YXIgZGljdHMgPSBkaWN0TWV0YS5yZXNwb25zZUNvbnZlcnRlcihyZXNwb25zZSwgZGljdE1ldGEpOwoKICAgIGlmICghKGRpY3RzIGluc3RhbmNlb2YgQXJyYXkpKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoJ3RoZSByZXR1cm4gb2YgcmVzcG9uc2VDb252ZXJ0ZXIgbXVzdCBiZSBBcnJheS48RGljdERhdGE+Jyk7CiAgICAgIGRpY3RzID0gW107CiAgICB9IGVsc2UgaWYgKGRpY3RzLmZpbHRlcihmdW5jdGlvbiAoZCkgewogICAgICByZXR1cm4gZCBpbnN0YW5jZW9mIF9EaWN0RGF0YS5kZWZhdWx0OwogICAgfSkubGVuZ3RoICE9PSBkaWN0cy5sZW5ndGgpIHsKICAgICAgY29uc29sZS5lcnJvcigndGhlIHR5cGUgb2YgZWxlbWVudHMgaW4gZGljdHMgbXVzdCBiZSBEaWN0RGF0YScpOwogICAgICBkaWN0cyA9IFtdOwogICAgfQoKICAgIChfZGljdCR0eXBlJHR5cGUgPSBkaWN0LnR5cGVbdHlwZV0pLnNwbGljZS5hcHBseShfZGljdCR0eXBlJHR5cGUsIFswLCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUl0uY29uY2F0KCgwLCBfdG9Db25zdW1hYmxlQXJyYXkyLmRlZmF1bHQpKGRpY3RzKSkpOwoKICAgIGRpY3RzLmZvckVhY2goZnVuY3Rpb24gKGQpIHsKICAgICAgX3Z1ZS5kZWZhdWx0LnNldChkaWN0LmxhYmVsW3R5cGVdLCBkLnZhbHVlLCBkLmxhYmVsKTsKICAgIH0pOwogICAgcmV0dXJuIGRpY3RzOwogIH0pOwp9"},{"version":3,"sources":["/Users/zhaosh/github/wdh-pmp/ruoyi-ui/src/utils/dict/Dict.js"],"names":["DEFAULT_DICT_OPTIONS","types","Dict","owner","label","type","options","Array","opts","undefined","Error","ps","_dictMetas","map","t","DictMeta","parse","forEach","dictMeta","Vue","set","lazy","push","loadDict","Promise","all","find","e","reject","dict","request","then","response","dicts","responseConverter","console","error","filter","d","DictData","length","splice","Number","MAX_SAFE_INTEGER","value"],"mappings":"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","sourcesContent":["import Vue from 'vue'\r\nimport { mergeRecursive } from \"@/utils/ruoyi\";\r\nimport DictMeta from './DictMeta'\r\nimport DictData from './DictData'\r\n\r\nconst DEFAULT_DICT_OPTIONS = {\r\n  types: [],\r\n}\r\n\r\n/**\r\n * @classdesc 字典\r\n * @property {Object} label 标签对象，内部属性名为字典类型名称\r\n * @property {Object} dict 字段数组，内部属性名为字典类型名称\r\n * @property {Array.<DictMeta>} _dictMetas 字典元数据数组\r\n */\r\nexport default class Dict {\r\n  constructor() {\r\n    this.owner = null\r\n    this.label = {}\r\n    this.type = {}\r\n  }\r\n\r\n  init(options) {\r\n    if (options instanceof Array) {\r\n      options = { types: options }\r\n    }\r\n    const opts = mergeRecursive(DEFAULT_DICT_OPTIONS, options)\r\n    if (opts.types === undefined) {\r\n      throw new Error('need dict types')\r\n    }\r\n    const ps = []\r\n    this._dictMetas = opts.types.map(t => DictMeta.parse(t))\r\n    this._dictMetas.forEach(dictMeta => {\r\n      const type = dictMeta.type\r\n      Vue.set(this.label, type, {})\r\n      Vue.set(this.type, type, [])\r\n      if (dictMeta.lazy) {\r\n        return\r\n      }\r\n      ps.push(loadDict(this, dictMeta))\r\n    })\r\n    return Promise.all(ps)\r\n  }\r\n\r\n  /**\r\n   * 重新加载字典\r\n   * @param {String} type 字典类型\r\n   */\r\n  reloadDict(type) {\r\n    const dictMeta = this._dictMetas.find(e => e.type === type)\r\n    if (dictMeta === undefined) {\r\n      return Promise.reject(`the dict meta of ${type} was not found`)\r\n    }\r\n    return loadDict(this, dictMeta)\r\n  }\r\n}\r\n\r\n/**\r\n * 加载字典\r\n * @param {Dict} dict 字典\r\n * @param {DictMeta} dictMeta 字典元数据\r\n * @returns {Promise}\r\n */\r\nfunction loadDict(dict, dictMeta) {\r\n  return dictMeta.request(dictMeta)\r\n    .then(response => {\r\n      const type = dictMeta.type\r\n      let dicts = dictMeta.responseConverter(response, dictMeta)\r\n      if (!(dicts instanceof Array)) {\r\n        console.error('the return of responseConverter must be Array.<DictData>')\r\n        dicts = []\r\n      } else if (dicts.filter(d => d instanceof DictData).length !== dicts.length) {\r\n        console.error('the type of elements in dicts must be DictData')\r\n        dicts = []\r\n      }\r\n      dict.type[type].splice(0, Number.MAX_SAFE_INTEGER, ...dicts)\r\n      dicts.forEach(d => {\r\n        Vue.set(dict.label[type], d.value, d.label)\r\n      })\r\n      return dicts\r\n    })\r\n}\r\n"]}]}